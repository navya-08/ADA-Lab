#include <stdio.h>
#include <stdlib.h>
#define MAX 100
void DFS(int v, int visited[], int stack[], int *top, int adj[MAX][MAX], int n) {
    visited[v] = 1;
    for (int i = 0; i < n; i++) {
        if (adj[v][i] == 1 && !visited[i]) {
            DFS(i, visited, stack, top, adj, n);
        }
    }
    stack[(*top)++] = v;
}
void topologicalSort(int start, int n, int adj[MAX][MAX]) {
    int visited[MAX] = {0};
    int stack[MAX];
    int top = 0;


    DFS(start, visited, stack, &top, adj, n);
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            DFS(i, visited, stack, &top, adj, n);
        }
    }
    printf("Topological Sort: ");
    for (int i = top - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
    printf("\n");
}
int main() {
    int n, start;
    int adj[MAX][MAX];
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix of the graph:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }
    printf("Enter the starting node: ");
    scanf("%d", &start);
    topologicalSort(start, n, adj);
    return 0;
}
